#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Column_BL", "Column_UL", "Column_UR", "Central_Column", "Wood_Plank", "CorrugatedCardboard", "ParticleEmitter", "AmbientAudio", "plash_m4a", "background_sound_m4a", "watch_ultra_trail_loop_orange_beige", "Watch", "mac_studio", "apple_vision_pro_ios16", "airpods_max_silver_ios14_rev1", "Column_BR", "GridMaterial"]
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "GridMaterial" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "Column_BR" (
        active = true
    )
    {
        reorder nameChildren = ["MaplePlywood", "Cylinder", "Cube"]
        float3 xformOp:translate = (0.5019741, 0.2, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Group" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Wood_Plank> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cylinder "Cylinder" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                double height = 0.4
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.05
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.0004221201, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    prepend token outputs:surface.connect = </Root/Column_BR/Group/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 0.05, 1)
                float3 xformOp:translate = (0, 0.2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    prepend token outputs:surface.connect = </Root/Column_BR/Group/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }
        }
    }

    def Xform "Column_BL" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["MaplePlywood", "Cylinder", "Cube"]
        rel material:binding = None (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.50197, 0.2, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Group" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Wood_Plank> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cylinder "Cylinder" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                double height = 0.4
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.05
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.0004221201, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Column_BL/Group/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 0.05, 1)
                float3 xformOp:translate = (0, 0.2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Column_BL/Group/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }
        }
    }

    def Xform "Column_UL" (
        active = true
    )
    {
        reorder nameChildren = ["MaplePlywood", "Cylinder", "Cube"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.5, 0.2, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Group" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Wood_Plank> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cylinder "Cylinder" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                double height = 0.9
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.05
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.24999999, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Column_UL/Group/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 0.05, 1)
                float3 xformOp:translate = (0, 0.7, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Column_UL/Group/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }
        }
    }

    def Xform "Column_UR" (
        active = true
    )
    {
        reorder nameChildren = ["MaplePlywood", "Cylinder", "Cube"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.5, 0.2, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Group" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Wood_Plank> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cylinder "Cylinder" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                double height = 0.9
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.05
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.24999999, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Column_UR/Group/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 0.05, 1)
                float3 xformOp:translate = (0, 0.7, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Column_UR/Group/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }
        }
    }

    def Xform "Central_Column" (
        active = true
    )
    {
        reorder nameChildren = ["MaplePlywood", "Group", "Sphere"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.2, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Group" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Sphere", "Cylinder", "Cube"]
            rel material:binding = </Root/CorrugatedCardboard> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cylinder "Cylinder" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                double height = 0.6
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.05
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.10000001, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Central_Column/Group/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.4
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 0.05, 1)
                float3 xformOp:translate = (0, 0.40000004, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Central_Column/Group/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Sphere "Sphere" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.08
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Sphere "Sphere_1" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.08
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def "Wood_Plank" (
        active = true
        references = @WoodPlank.usdz@
    )
    {
        color3f inputs:Basecolor_Tint = (0.6642242, 0.66424006, 0.66423154) (
            colorSpace = "srgb_texture"
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-56.812614, 67.17455)
                    float2 sizeInSubgraph = (160.5, 53)
                    int stackingOrderInSubgraph = 2352
                }
            }
        )
        float2 inputs:UV_Scale (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-725.2588, 351.55255)
                    float2 sizeInSubgraph = (138.5, 53)
                    int stackingOrderInSubgraph = 2272
                }
            }
        )
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Dot"
        {
            float2 ui:nodegraph:node:size = (44, 18)
        }

        over "multiply"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "add"
        {
            float2 ui:nodegraph:node:size = (61.5, 36.5)
        }

        over "PreviewSurface"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        over "Mix"
        {
            float2 ui:nodegraph:node:size = (109, 145)
        }

        over "Swizzle"
        {
            float2 ui:nodegraph:node:size = (133.5, 40)
        }

        over "Swizzle_1"
        {
            float2 ui:nodegraph:node:size = (145.5, 53)
        }

        over "Multiply_1"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "BaseColor"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Roughness"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Metallic"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Normal"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }
    }

    def "CorrugatedCardboard" (
        active = true
        references = @CorrugatedCardboard.usdz@
    )
    {
        color3f inputs:Basecolor_Tint = (0.57414854, 0.5741624, 0.574155) (
            colorSpace = "srgb_texture"
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-45.51249, 49.172512)
                    float2 sizeInSubgraph = (160.5, 53)
                    int stackingOrderInSubgraph = 2294
                }
            }
        )
        float2 inputs:UV_Scale (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-725.2588, 351.55255)
                    float2 sizeInSubgraph = (138.5, 53)
                    int stackingOrderInSubgraph = 2272
                }
            }
        )
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        over "Mix"
        {
            float2 ui:nodegraph:node:size = (109, 145)
        }

        over "Swizzle_1"
        {
            float2 ui:nodegraph:node:size = (145.5, 53)
        }

        over "Swizzle"
        {
            float2 ui:nodegraph:node:size = (133.5, 40)
        }

        over "Multiply_1"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "Dot"
        {
            float2 ui:nodegraph:node:size = (44, 18)
        }

        over "multiply"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "add"
        {
            float2 ui:nodegraph:node:size = (61.5, 36.5)
        }

        over "Metallic"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Normal"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "PreviewSurface"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        over "BaseColor"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Roughness"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }
    }

    def Xform "ParticleEmitter"
    {
        float3 xformOp:translate = (0, 0.65, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "VFXEmitter"
        {
            token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Normal"
                token birthLocation = "Surface"
                float3 emissionDirection = (0, 1, 0)
                double emissionDuration = 0.5
                double emissionDurationVariation = 0
                token emitterShape = "Box"
                double idleDuration = 5
                double idleDurationVariation = 0
                bool isEmitting = 0
                bool isLocal = 0
                bool isSpawningEnabled = 0
                bool loops = 0
                float particleSpeed = 0.5
                float particleSpeedVariation = 0.1
                float radialAmount = 50
                float3 shapeSize = (0.05, 0.01, 0.05)
                bool spawnInheritParentColor = 0
                token spawnOccasion = "OnDeath"
                float spawnSpreadFactor = 0
                float spawnSpreadFactorVariation = 0
                float spawnVelocityFactor = 1
                float torusInnerRadius = 30
                double warmupDuration = 0

                def RealityKitStruct "mainEmitter"
                {
                    float3 acceleration = (0, -0.05, 0)
                    token animationRepeatMode = "PlayOnce"
                    token billboardMode = "Billboard"
                    float birthRate = 1000
                    float birthRateVariation = 0
                    token blendMode = "Alpha"
                    float colorEvolutionPower = 1
                    int64 columnCount = 4
                    float dampingFactor = 8
                    float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                    float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                    float frameRate = 0
                    float frameRateVariation = 0
                    int64 initialFrame = 2
                    int64 initialFrameVariation = 6
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0
                    float noiseScale = 1
                    float noiseStrength = 0.1
                    token opacityOverLife = "LinearFadeOut"
                    float particleAngle = 0
                    float particleAngleVariation = 0
                    float particleAngularVelocity = 0
                    float particleAngularVelocityVariation = 1
                    asset particleImage = @ParticleEmitterPresetTextures/dustsheet.exr@
                    double particleLifeSpan = 2
                    double particleLifeSpanVariation = 1
                    float particleMass = 1
                    float particleMassVariation = 0.8
                    float particleSize = 0.01
                    float particleSizeVariation = 0
                    float3 radialGravityCenter = (0, -0.1, 0)
                    float radialGravityStrength = -0.1
                    int64 rowCount = 4
                    float sizeMultiplierAtEndOfLifespan = 8
                    float sizeMultiplierAtEndOfLifespanPower = 0.2
                    token sortOrder = "DecreasingDepth"
                    float spreadingAngle = 0
                    float4 startColorA = (1, 1, 1, 0.26)
                    float4 startColorB = (1, 1, 1, 0.07)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                }
            }
        }
    }

    def Xform "AmbientAudio"
    {
        float3 xformOp:translate = (0, 0.6, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "AmbientAudio"
        {
            float gain = -12.124307
            uniform token info:id = "RealityKit.AmbientAudio"
        }
    }

    def RealityKitAudioFile "plash_m4a"
    {
        uniform asset file = @plash.m4a@
    }

    def RealityKitAudioFile "background_sound_m4a"
    {
        uniform asset file = @background_sound.m4a@
    }

    def "mac_studio" (
        active = true
        references = @mac_studio.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (-0.5, 0.9, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canDrag = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (26.018017, 11.258175, 21.370634)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.0038237572, 5.6070566, 0.41823483)
                }
            }
        }

        def RealityKitComponent "Accessibility"
        {
            uniform token info:id = "RealityKit.Accessibility"
            bool isEnabled = 1
            string label = "Mac Studio"
        }
    }

    def "apple_vision_pro_ios16" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -1.5707963, 0)
        }
        references = @apple_vision_pro_ios16.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, -0.7071067, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (0.5, 0.95, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canDrag = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (27.25832, 9.864521, 18.286278)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.938395, 0.5577903, -0.10174179)
                }
            }
        }

        def RealityKitComponent "Accessibility"
        {
            uniform token info:id = "RealityKit.Accessibility"
            bool isEnabled = 1
            string label = "Apple Vision Pro"
        }
    }

    def "airpods_max_silver_ios14_rev1" (
        active = true
        references = @airpods_max_silver_ios14_rev1.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (-0.5, 0.45, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canDrag = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (17.604572, 19.32428, 8.303663)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.010771275, 5.119904, 0)
                }
            }
        }

        def RealityKitComponent "Accessibility"
        {
            uniform token info:id = "RealityKit.Accessibility"
            bool isEnabled = 1
            string label = "AirPods Max"
        }
    }

    def "watch_ultra_trail_loop_orange_beige" (
        active = true
        references = @watch_ultra_trail_loop_orange_beige.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (0.5, 0.45, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canDrag = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (4.440644, 7.5301323, 7.660688)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.11280894, 0.08724964, 0.34643912)
                }
            }
        }

        def RealityKitComponent "Accessibility"
        {
            uniform token info:id = "RealityKit.Accessibility"
            bool isEnabled = 1
            string label = "Apple Watch Ultra"
        }
    }
}

